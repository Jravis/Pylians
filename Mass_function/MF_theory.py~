import numpy as np
import mass_function_library as MFL
import bias_library as BL


#function used to compute the HMF for a particular author
def HMF(Omega_CDM,Omega_B,z,M_min,M_max,bins,f_Pk_DM,f_transfer,f_ST,
        f_Tinker,f_Crocce,f_Jenkins,f_Warren,do_CDM,do_ST,do_Tinker,
        do_Crocce,do_Jenkins,do_Warren):

    OmegaM=Omega_CDM+Omega_B
    M=np.logspace(np.log10(M_min),np.log10(M_max),bins+1)

    if do_CDM:
        [k,Pk]=BL.CDM_Pk(f_Pk_DM,f_transfer,Omega_CDM,Omega_B)    
    else:
        [k,Pk]=BL.DM_Pk(f_Pk_DM)

    if do_ST:
        dndM=MFL.ST_mass_function(k,Pk,OmegaM,None,None,None,M)[1]
        f=open(f_ST,'w')
        for i in range(len(M)):
            f.write(str(M[i])+' '+str(dndM[i])+'\n')
        f.close()

    if do_Tinker:
        dndM=MFL.Tinker_mass_function(k,Pk,OmegaM,None,None,None,M)[1]
        f=open(f_Tinker,'w')
        for i in range(len(M)):
            f.write(str(M[i])+' '+str(dndM[i])+'\n')
        f.close()

    if do_Crocce:
        dndM=MFL.Crocce_mass_function(k,Pk,OmegaM,z,None,None,None,M)[1]
        f=open(f_Crocce,'w')
        for i in range(len(M)):
            f.write(str(M[i])+' '+str(dndM[i])+'\n')
        f.close()

    if do_Jenkins:
        dndM=MFL.Jenkins_mass_function(k,Pk,OmegaM,None,None,None,M)[1]
        f=open(f_Jenkins,'w')
        for i in range(len(M)):
            f.write(str(M[i])+' '+str(dndM[i])+'\n')
        f.close()

    if do_Warren:
        dndM=MFL.Warren_mass_function(k,Pk,OmegaM,None,None,None,M)[1]
        f=open(f_Warren,'w')
        for i in range(len(M)):
            f.write(str(M[i])+' '+str(dndM[i])+'\n')
        f.close()



################################# INPUT ######################################
Omega_CDM=0.2208
Omega_B=0.05

M_min=1e10 #Msun/h
M_max=1e16 #Msun/h

bins=50

Z=[0.0,
   0.5,
   1.0]

LPS=['../../../CAMB_TABLES/ics_matterpow_0.dat',
     '../../../CAMB_TABLES/ics_matterpow_0.5.dat',
     '../../../CAMB_TABLES/ics_matterpow_1.dat']

Transfer=['../../../CAMB_TABLES/ics_transfer_0.dat',
          '../../../CAMB_TABLES/ics_transfer_0.5.dat',
          '../../../CAMB_TABLES/ics_transfer_1.dat']

f_ST='ST_MF.dat'
f_Tinker='Tinker_MF.dat'
f_Jenkins='Jenkins_MF.dat'
f_Warren='Warren_MF.dat'

f_Crocce_CDM=['Crocce_MF_CDM_z=0.dat',
              'Crocce_MF_CDM_z=0.5.dat',
              'Crocce_MF_CDM_z=1.dat']

f_Crocce_DM=['Crocce_MF_DM_z=0.dat',
              'Crocce_MF_DM_z=0.5.dat',
              'Crocce_MF_DM_z=1.dat']

do_ST=False
do_Tinker=False
do_Crocce=True
do_Jenkins=False
do_Warren=False

#first: iterate along redshifts
for i in range(len(Z)):
    z=Z[i]
    f_Pk_DM=LPS[i]; f_transfer=Transfer[i]

    #iterate along cases
    do_CDM=False   #This will compute the HMF using the CDM P(k)
    f_Crocce=f_Crocce_DM[i]
    HMF(Omega_CDM,Omega_B,z,M_min,M_max,bins,f_Pk_DM,f_transfer,f_ST,
        f_Tinker,f_Crocce,f_Jenkins,f_Warren,do_CDM,do_ST,do_Tinker,
        do_Crocce,do_Jenkins,do_Warren)

    do_CDM=True   #This will compute the HMF using the CDM P(k)
    f_Crocce=f_Crocce_CDM[i]
    HMF(Omega_CDM,Omega_B,z,M_min,M_max,bins,f_Pk_DM,f_transfer,f_ST,
        f_Tinker,f_Crocce,f_Jenkins,f_Warren,do_CDM,do_ST,do_Tinker,
        do_Crocce,do_Jenkins,do_Warren)

##############################################################################


